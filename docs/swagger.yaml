basePath: /api/v1
definitions:
  dto.ApiError:
    properties:
      message:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.RegisterResponse:
    properties:
      token:
        type: string
    type: object
  dto.UserProfile:
    properties:
      login:
        type: string
      subscribe_status:
        type: boolean
      uuid:
        type: string
    type: object
info:
  contact: {}
  description: Привет, Полина! Это документация для тебя, прикладываю также задачу
    на pm.is74.ru
  title: MusicMan Backend API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Выполняет вход пользователя в систему и возвращает JWT токен
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная аутентификация
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/dto.ApiError'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ApiError'
      summary: Аутентификация пользователя
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя и возвращает JWT токен
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная регистрация
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/dto.ApiError'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ApiError'
      summary: Регистрация нового пользователя
      tags:
      - auth
  /profile/me:
    get:
      description: Возвращает информацию о текущем авторизованном пользователе
      produces:
      - application/json
      responses:
        "200":
          description: Успешное получение профиля
          schema:
            $ref: '#/definitions/dto.UserProfile'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Получить профиль пользователя
      tags:
      - profile
securityDefinitions:
  BearerAuth:
    description: 'JWT токен в формате: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
