basePath: /api/v1
definitions:
  dto.ApiError:
    properties:
      message:
        type: string
    type: object
  dto.CreatePackRequest:
    properties:
      author:
        type: string
      description:
        type: string
      genre:
        type: string
      name:
        type: string
    required:
    - author
    - description
    - genre
    - name
    type: object
  dto.CreatePaymentRequest:
    properties:
      amount:
        description: Amount сумма платежа в КОПЕЙКАХ
        type: integer
      return_uri:
        description: ReturnURI ссылка на которую вернуть после оплаты
        type: string
    required:
    - amount
    - return_uri
    type: object
  dto.CreateSampleRequest:
    properties:
      author:
        type: string
      description:
        type: string
      genre:
        type: string
      pack_id:
        type: string
      title:
        type: string
    required:
    - author
    - description
    - genre
    - title
    type: object
  dto.DownloadURLResponse:
    properties:
      download_url:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.PackDTO:
    properties:
      author:
        type: string
      created_at:
        type: string
      description:
        type: string
      genre:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.PackWithSamplesResponse:
    properties:
      pack:
        $ref: '#/definitions/dto.PackDTO'
      samples:
        items:
          $ref: '#/definitions/dto.SampleDTO'
        type: array
    type: object
  dto.RegisterRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.RegisterResponse:
    properties:
      token:
        type: string
    type: object
  dto.SampleDTO:
    properties:
      author:
        type: string
      created_at:
        type: string
      description:
        type: string
      download_url:
        type: string
      duration:
        type: number
      genre:
        type: string
      id:
        type: string
      pack_id:
        type: string
      size:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  dto.UUIDResponse:
    properties:
      uuid:
        type: string
    type: object
  dto.UpdatePackRequest:
    properties:
      author:
        type: string
      description:
        type: string
      genre:
        type: string
      name:
        type: string
    type: object
  dto.UpdateSampleRequest:
    properties:
      author:
        type: string
      description:
        type: string
      genre:
        type: string
      pack_id:
        type: string
      title:
        type: string
    type: object
  dto.UserPayment:
    properties:
      amount:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      payment_status:
        type: string
    type: object
  dto.UserProfile:
    properties:
      login:
        type: string
      tokens:
        type: integer
      uuid:
        type: string
    type: object
info:
  contact: {}
  description: Привет, Полина! Это документация для тебя, прикладываю также задачу
    на pm.is74.ru
  title: MusicMan Backend API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Выполняет вход пользователя в систему и возвращает JWT токен
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная аутентификация
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/dto.ApiError'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ApiError'
      summary: Аутентификация пользователя
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя и возвращает JWT токен
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная регистрация
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/dto.ApiError'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ApiError'
      summary: Регистрация нового пользователя
      tags:
      - auth
  /packs:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PackDTO'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Получение всех паков (без семплов)
      tags:
      - packs
    post:
      consumes:
      - application/json
      parameters:
      - description: Pack data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePackRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UUIDResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Создает пак семплов (без семплов)
      tags:
      - packs
  /packs/{id}:
    delete:
      parameters:
      - description: Pack ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Удаляет пак
      tags:
      - packs
    get:
      parameters:
      - description: Pack ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PackWithSamplesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ApiError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Получает пак вместе с семплами (но без аудио содержимого)
      tags:
      - packs
    put:
      consumes:
      - application/json
      parameters:
      - description: Pack ID
        in: path
        name: id
        required: true
        type: string
      - description: Update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePackRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Обновляет пак
      tags:
      - packs
  /payments/history:
    get:
      description: Возвращает историю платежей текущего авторизованного пользователя
      parameters:
      - description: Bearer токен
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список платежей пользователя
          schema:
            items:
              $ref: '#/definitions/dto.UserPayment'
            type: array
        "500":
          description: Ошибка сервера или не удалось получить платежи
      summary: Получить список платежей пользователя
      tags:
      - payments
  /payments/new:
    post:
      description: Создаёт платёж через YooKassa и перенаправляет пользователя на
        страницу оплаты.
      parameters:
      - description: Bearer токен
        in: header
        name: Authorization
        required: true
        type: string
      - description: Данные для создания платежа. return_uri - ссылка на которую вернуть
          пользователя после оплаты. amount в копейках
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePaymentRequest'
      responses:
        "301":
          description: Redirect — ссылка на YooKassa
          schema:
            type: string
        "400":
          description: Невалидное тело запроса
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Ошибка сервера или не удалось создать платёж
      summary: Создание нового платежа
      tags:
      - payments
  /profile/me:
    get:
      description: Возвращает информацию о текущем авторизованном пользователе
      produces:
      - application/json
      responses:
        "200":
          description: Успешное получение профиля
          schema:
            $ref: '#/definitions/dto.UserProfile'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Получить профиль пользователя
      tags:
      - profile
  /samples:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.SampleDTO'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Получение всех семплов, но без файлов
      tags:
      - samples
    post:
      consumes:
      - application/json
      parameters:
      - description: Pack data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSampleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UUIDResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Создает новый семпл (аудио загружается для созданного семпла через
        UploadAudio эндпоинт по ID семпла)
      tags:
      - samples
  /samples/{id}:
    delete:
      parameters:
      - description: Sample ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SampleDTO'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Удаляет семпл
      tags:
      - samples
    get:
      parameters:
      - description: Sample ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SampleDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ApiError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Получение семпла по ID
      tags:
      - samples
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Аудио файл (sample)
        in: formData
        name: file
        required: true
        type: file
      - description: Sample ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.DownloadURLResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ApiError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Загрузка .wav аудио файла для созданного семпла
      tags:
      - samples
    put:
      consumes:
      - application/json
      parameters:
      - description: Update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSampleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SampleDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - BearerAuth: []
      summary: Обновляет семпл
      tags:
      - samples
securityDefinitions:
  BearerAuth:
    description: 'JWT токен в формате: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
